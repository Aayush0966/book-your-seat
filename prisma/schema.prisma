generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  fullName      String    @map("full_name") @db.VarChar(100)
  email         String    @unique @db.VarChar(255)
  password      String?
  role          Role      @default(USER)
  contactNumber BigInt?   @map("contact_number")
  otp           Int?      @db.Integer
  otpExpiresAt  BigInt?   @map("otp_expires_at")
  bookings      Booking[]
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  accounts      Account[]
  Review        Review[]

  @@index([email])
}

model Account {
  id                String @id @default(cuid())
  userId            Int    @map("user_id")
  provider          String
  providerAccountId String @map("provider_account_id")
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Movie {
  id          Int         @id @default(autoincrement())
  title       String      @db.VarChar(255)
  description String      @db.Text
  director    String      @db.Text
  posterUrl   String      @map("poster_url") @db.Text
  ageRating   String      @map("age_rating") @db.Text
  genres      Json
  status      MovieStatus @default(UPCOMING)
  casts       Json
  language    String      @db.Text
  duration    Int         @db.Integer
  releaseDate Int         @map("release_date")
  shows       Show[]
  backdropUrl String      @map("backdrop_url") @db.Text
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  @@index([status])
  @@index([title])
}

model Screen {
  id           Int      @id @default(autoincrement())
  type         String   @db.Text
  screenNumber Int      @unique @map("screen_number")
  totalSeats   Int      @map("total_seats") @db.Integer
  shows        Show[]
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@index([screenNumber])
}

model Show {
  id        Int       @id @default(autoincrement())
  movieId   Int       @map("movie_id")
  screenId  Int       @map("screen_id")
  showTime  Int       @map("show_time")
  startDate Int       @map("start_date")
  endDate   Int       @map("end_date")
  pricing   Json      @db.Json
  movie     Movie     @relation(fields: [movieId], references: [id], onDelete: Cascade)
  screen    Screen    @relation(fields: [screenId], references: [id], onDelete: Cascade)
  bookings  Booking[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@index([movieId])
  @@index([screenId])
  @@index([showTime])
}

model Booking {
  id            String        @id @default(cuid()) @map("id")
  userId        Int           @map("user_id")
  showId        Int           @map("show_id")
  showDate      Int           @map("show_date")
  orderId       String        @unique
  paymentRef    String?       
  seatsCount    Int           @map("seats_count")
  seatsBooked   Json          @map("seats_booked")
  totalPrice    Float         @map("total_price") @db.DoublePrecision
  bookingDate   Int           @map("booking_date")
  bookingStatus BookingStatus @default(CONFIRMED) @map("booking_status")
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  show          Show          @relation(fields: [showId], references: [id], onDelete: Cascade)
  tickets       Ticket[]
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  @@index([userId])
  @@index([showId])
  @@index([bookingStatus])
  @@index([showDate])
  @@index([seatsCount])
}

model Review {
  reviewId  String   @id @default(cuid()) @map("review_id")
  userId    Int      @map("user_id")
  rating    Int
  comment   String?  @db.Text
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId])
}

model Ticket {
  ticketId     String       @id @default(cuid()) @map("ticket_id")
  bookingId    String       @map("booking_id")
  seatNumber   String       @map("seat_number")
  seatCategory String       @map("seat_category")
  price        Float        @map("price") @db.DoublePrecision
  status       TicketStatus @default(VALID) @map("status")
  booking      Booking      @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  @@index([bookingId])
  @@index([seatNumber])
}

enum Role {
  USER
  ADMIN
}

enum BookingStatus {
  CONFIRMED
  CANCELLED
  PENDING
}

enum MovieStatus {
  UPCOMING
  ACTIVE
  COMPLETED
}

enum TicketStatus {
  VALID
  USED
  CANCELLED
  PENDING
}
